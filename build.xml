<?xml version="1.0"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->

<project name="MakeApacheFlexForFlashBuilder" basedir="." default="build">

    <!--location of property file -->
    <property file="${basedir}/build.properties" description="Properities for MakeApacheFlexForFlashBuilder project" />

    <!-- additional tasks -->
    <taskdef name="mxmlc" classname="flex.ant.MxmlcTask" classpath="${FLEX_TASKS}"/>
    <taskdef name="compc" classname="flex.ant.CompcTask" classpath="${FLEX_TASKS}"/>
    <taskdef name="asdoc" classname="flex.ant.AsDocTask" classpath="${FLEX_TASKS}"/>

    <target name="build" description="compiles application">
        <antcall target="init"/>
        <antcall target="cleanup"/>
    </target>
	
	<target name="init" depends="determineOS, clean,createDirs" description="Creates the deploy folders and sets app extension">
		<available file="${KEYSTORE}" property="CERTIFICATE_FLAG"/>
		<antcall target="packagenative"/>
		<antcall target="abortBuild"/>
    </target>
	
	<target name="createDirs" unless="unsupportedOS">
		<mkdir dir="${BUILD_DIR}"/>
		<mkdir dir="${RELEASE_DIR}"/>
	</target>

	<target name="determineOS" description="Determine OS on which build is running so that we can create the correct native installer">
		<condition property="unsupportedOS">
			<and>   
				<os family="unix" />
				<not>
					<os family="mac" />
				</not>
	       </and>
		</condition>
		<condition property="extension" value="exe">
			<os family="windows" />
		</condition>
		<condition property="extension" value="dmg">
			<os family="mac" />
		</condition>
	</target>
	
	<target name="packagenative" depends="compile, certificate, packageair" unless="unsupportedOS"
		description="Packages the AIR file from the build directory to create a native installer (exe/dmg) file">
		<java jar="${ADT}" fork="true"
			failonerror="true"
			maxmemory="512m">
			<arg value="-package"/>
			<arg value="-target"/>
			<arg value="native"/>
			<arg value="-storetype"/>
			<arg value="${STORETYPE}"/>
			<arg value="-keystore"/>
			<arg value="${KEYSTORE}"/>
			<arg value="-storepass"/>
			<arg value="${CERT_PASSWORD}"/>
			<arg value="${RELEASE_DIR}/${APP_NAME}.${extension}"/>
			<arg value="${BUILD_DIR}/${APP_NAME}.air"/>
		</java>
	</target>

	<target name="abortBuild" if="unsupportedOS">
		<echo>Unable to create a .exe or a .dmg file on this operating system.</echo>
		<echo>You must use ADT on the same operating system as that of the native installer file you want to generate. 
				So, to create an EXE file for Windows, run this build on Windows. To create a DMG file for Mac OS, run this 
				build on Mac OS. 
		</echo>
	</target>

	<target name="compile"  unless="unsupportedOS"
		description="Compiles the AIR application to a SWF file and places SWF in a temp directory to be packaged.">
		<mxmlc file="${SOURCE_DIR}/${APP_NAME}.${APP_EXTENSION}"
			output="${BUILD_DIR}/${APP_NAME}.swf"
			locale="${LOCALE}"
			static-rsls="true"
			accessible="true"
			configname="air"
			debug="${DEBUG_FLAG}"
			failonerror="true"
			fork="true"
			maxmemory="512m">
			<source-path path-element="${SOURCE_DIR}"/>
			<external-library-path file="${FLEX_HOME}/frameworks/libs/air/airglobal.swc" append="true"/>
			<library-path dir="${LIBRARY_DIR}" includes="*.swc" append="true"/>
		</mxmlc>
	</target>

	<target name="certificate" unless="CERTIFICATE_FLAG,unsupportedOS">
		<java jar="${ADT}" fork="true"
			failonerror="true">
			<arg value="-certificate"/>
			<arg value="-cn"/>
			<arg value="${CERT_NAME}"/>
			<arg value="-ou"/>
			<arg value="${CERT_ORG_UNIT}"/>
			<arg value="-o"/>
			<arg value="${CERT_ORG_NAME}"/>
			<arg value="-c"/>
			<arg value="${CERT_COUNTRY}"/>
			<arg value="${CERT_KEY_TYPE}"/>
			<arg value="${KEYSTORE}"/>
			<arg value="${CERT_PASSWORD}"/>
		</java>
	</target>

	<target name="packageair" unless="unsupportedOS"
		description="Packages the build SWF file from a temp directory to create an AIR file">
		<java jar="${ADT}" fork="true"
			failonerror="true"
			maxmemory="512m">
			<arg value="-package"/>
			<arg value="-storetype"/>
			<arg value="${STORETYPE}"/>
			<arg value="-keystore"/>
			<arg value="${KEYSTORE}"/>
			<arg value="-storepass"/>
			<arg value="${CERT_PASSWORD}"/>
			<arg value="${BUILD_DIR}/${APP_NAME}.air"/>
			<arg value="${SOURCE_DIR}/${APP_NAME}-app.xml"/>
			<arg value="-C"/>
			<arg value="${BUILD_DIR}"/>
			<arg value="${BUILD_DIR}/${APP_NAME}.swf"/>
			<arg value="-C"/>
			<arg value="${SOURCE_DIR}"/>
			<arg value="${SOURCE_DIR}/${APP_CONFIG_XML_NAME}.xml"/>
		</java>
	</target>
	
	<target name="clean" unless="unsupportedOS" description="Cleans up old files.">
		<delete dir="${BUILD_DIR}" failOnError="false" includeEmptyDirs="true" />
		<delete dir="${RELEASE_DIR}" failOnError="false" includeEmptyDirs="true" />
	</target>

	<target name="cleanup" description="Cleans up old files.">
		<delete dir="${BUILD_DIR}" failOnError="false" includeEmptyDirs="true" />
	</target>

</project>