<?xml version="1.0" encoding="utf-8"?>
<!--

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->


<!--
This script should be used to create an Apache Flex SDK that has the
directory structure that an IDE expects.

The Adobe AIR SDK and the Adobe Flash Player playerglobal.swc are integrated
into the directory structure.  The paths in the framework configuration files are 
modified to reflect this.  The AIR_HOME and PLAYERGLOBAL_HOME environment 
variables are not required because the locations of these pieces are known.

Command line usage: packageApacheFlexForIDE [sdk directory]

-->

<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="800" height="600" maxWidth="800" maxHeight="550" minWidth="800" minHeight="550"
					   backgroundColor="0xDDDDDD" title="Package Apache Flex SDK for use in an IDE"
					   invoke="applicationInvoked(event)" showStatusBar="false"
					   skinClass="ws.tink.spark.skins.controls.InstallApacheFlexSkin" xmlns:skins="org.apache.flex.packageflexsdk.view.skins.*" xmlns:controls="ws.tink.spark.controls.*" xmlns:controls1="org.apache.flex.packageflexsdk.view.controls.*" xmlns:components="org.apache.flex.packageflexsdk.view.components.*">
	
	<fx:Style source="assets/styles/styles.css" />
	
	<fx:Script>
		<![CDATA[	
			import flash.globalization.LocaleID;
			import flash.globalization.StringTools;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.events.EffectEvent;
			import mx.utils.StringUtil;
			
			import org.apache.flex.packageflexsdk.resource.RuntimeLocale;
			import org.apache.flex.packageflexsdk.resource.ViewResourceConstants;
			import org.apache.flex.packageflexsdk.view.components.AdobeLicense;
			import org.apache.flex.packageflexsdk.view.components.ConsoleWindow;
			import org.apache.flex.packageflexsdk.view.components.MPLLicense;
			import org.as3commons.zip.Zip;
			import org.as3commons.zip.ZipEvent;
			import org.as3commons.zip.ZipFile;
			
			import spark.components.Window;
			import spark.effects.easing.Sine;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			import ws.tink.spark.controls.StepItem;
			
			/**
			 * Apache Flex binary distribution
			 * 
			 * Values stored in ApacheFlexConfig.xml edit file to change
			 * 
			 */
			private var APACHE_FLEX_BIN_DISTRO_FILE:String;
			private var APACHE_FLEX_BIN_DISTRO_URL:String;
			
			/**
			 * Adobe AIR SDK
			 * 
			 * Values stored in ApacheFlexConfig.xml edit file to change
			 * 
			 */ 
			private var ADOBE_AIR_SDK_WIN_FILE:String;
			private var ADOBE_AIR_SDK_WIN_URL:String;
			private var ADOBE_AIR_SDK_MAC_FILE:String;
			private var ADOBE_AIR_SDK_MAC_URL:String;
			
			/**
			 * Adobe Flash Player
			 * 
			 * Values stored in ApacheFlexConfig.xml edit file to change
			 * 
			 */
			private var ADOBE_FB_GLOBALPLAYER_SWC_FILE:String;
			private var ADOBE_FB_GLOBALPLAYER_SWC_URL:String;

			
			/**
			 * Optional installs 
			 * 
			 */
			private var OSMF_FILE:String;
			private var OSMF_URL:String;
			
			private var TLF_FILE:String;
			private var TLF_URL:String;

			private var BLAZEDS_FILE:String;
			private var BLAZEDS_URL:String;

			private var AFE_FILE:String;
			private var AFE_URL:String;
			private var AGLJ40_FILE:String;
			private var AGLJ40_URL:String;
			private var FLEX_FONTKIT_FILE:String;
			private var FLEX_FONTKIT_URL:String;
			private var RIDEAU_FILE:String;
			private var RIDEAU_URL:String;
			
/* 			private var ADOBE_FLEX_4_6_FILE:String;
			private var ADOBE_FLEX_4_6_URL:String; */
			
			private const APP_NAME:String = "InstallApacheFlex";
			private const WINDOWS_OS:String = "windows";
			private const MAC_OS:String = "mac";
			
			private var _flexHome:String;
			private var _flexTemp:String;
			private var _flexHomeDir:File;
			private var _flexTempDir:File;
			private var _apacheFlexSDKZipFile:File;
			private var _adobeAIRSDKZipFile:File;
			private var _fbGlobalPlayerDir:File;
			private var _fbGlobalPlayerFile:File;
			private var _blazeDSJarFile:File;
			private var _afeJarFile:File;
			private var _aglj40JarFile:File;
			private var _flexFontKitJarFile:File;
			private var _rideauJarFile:File;
			private var _osmfFile:File;
			private var _tlfFile:File;
			
			private var _os:String;
			private var _loader:URLLoader;	
			private var _process:NativeProcess;
			private var _previousDisplayedPercent:int = 0;
			private var _runtimeLocale:RuntimeLocale = new RuntimeLocale();
			private var _fileUnzipErrorFunction:Function;
			private var _numOptionalComponents:int = 4;
			private var _numOptionalComponentsPermissions:int = 0;
			
			[Bindable] private var _constants:ViewResourceConstants;
			[Bindable] private var _installationSteps:ArrayCollection = new ArrayCollection();
			[Bindable] private var _optionalInstallsDataProvider:ArrayCollection = new ArrayCollection();
			[Bindable] public var _messages:ArrayCollection = new ArrayCollection();
			
			protected function applicationInvoked(event:InvokeEvent):void
			{
				centerWindow();
				_constants = ViewResourceConstants.getInstance();
				_runtimeLocale.enumerateBundles();
				_langSelect.dataProvider = _runtimeLocale.supportedLanguage;
				_langSelect.selectedIndex = 0;
				selectDefaultLanguage();
				loadXML();
			}
			
			protected function selectDefaultLanguage():void {
				var length:int = _runtimeLocale.supportedLanguage.length;
				var tool:StringTools = new StringTools(LocaleID.DEFAULT);
				var userLocale:String = tool.actualLocaleIDName.replace("-","_");
				
				for (var i:int = 0; i < length; i++)
				{
					if (_runtimeLocale.supportedLanguage[i].data == userLocale) {
						_langSelect.selectedIndex = i;
						break;
					}
				}
			}
			
			protected function centerWindow():void
			{
				this.nativeWindow.x = Screen.mainScreen.bounds.width/2 - this.nativeWindow.width/2;
				this.nativeWindow.y = Screen.mainScreen.bounds.height/2 - this.nativeWindow.height/2;
			}
			
			protected function loadXML():void
			{
				var request:URLRequest = new URLRequest(_constants.CONFIG_URL);
				
				_loader = new URLLoader();
				
				try
				{
					_loader.load(request);
				}
				catch (error:Error)
				{
					log(_constants.ERROR_CONFIG_XML_LOAD + error.errorID + " " + error.message);
				}
				
				_loader.addEventListener(IOErrorEvent.IO_ERROR, xmlError);
				_loader.addEventListener(Event.COMPLETE, xmlLoaded);
			}
			
			protected function xmlError(event:IOErrorEvent):void
			{
				log(_constants.ERROR_CONFIG_XML_LOAD + event.errorID);
			}
			
			protected function xmlLoaded(event:Event):void
			{
				setOSSpecificVariables();
				
				if (setXMLVariables())
				{
					main();
				}
			}
			
			protected function setXMLVariables():Boolean
			{
				var data:XML = XML(_loader.data);
				var version:Number = Number(data.version.toString());
				var files:XMLList = data.files.file;
				var keepGoing:Boolean = true;
				
				APACHE_FLEX_BIN_DISTRO_FILE = files.(@name == 'ApacheFlexSDK').@file.toString();
				APACHE_FLEX_BIN_DISTRO_URL = files.(@name == 'ApacheFlexSDK').@path.toString();
				if (!APACHE_FLEX_BIN_DISTRO_FILE || !APACHE_FLEX_BIN_DISTRO_URL)
				{
					log(_constants.ERROR_INVALID_SDK_URL);
					keepGoing = false;
				}
				APACHE_FLEX_BIN_DISTRO_URL += APACHE_FLEX_BIN_DISTRO_FILE;
				
				ADOBE_AIR_SDK_WIN_FILE = files.(@name == 'AdobeAIRSDKWin').@file.toString();
				ADOBE_AIR_SDK_WIN_URL = files.(@name == 'AdobeAIRSDKWin').@path.toString();
				if (_os == WINDOWS_OS && (!ADOBE_AIR_SDK_WIN_FILE || !ADOBE_AIR_SDK_WIN_URL))
				{
					log(_constants.ERROR_INVALID_AIR_SDK_URL_WINDOWS);
					keepGoing = false;
				}
				ADOBE_AIR_SDK_WIN_URL += ADOBE_AIR_SDK_WIN_FILE;
				
				ADOBE_AIR_SDK_MAC_FILE = files.(@name == 'AdobeAIRSDKMac').@file.toString();
				ADOBE_AIR_SDK_MAC_URL = files.(@name == 'AdobeAIRSDKMac').@path.toString();
				if (_os == MAC_OS && (!ADOBE_AIR_SDK_MAC_FILE || !ADOBE_AIR_SDK_MAC_URL))
				{
					log(_constants.ERROR_INVALID_AIR_SDK_URL_MAC);
					keepGoing = false;
				}
				ADOBE_AIR_SDK_MAC_URL += ADOBE_AIR_SDK_MAC_FILE;
				
				ADOBE_FB_GLOBALPLAYER_SWC_FILE =  files.(@name == 'FlashPlayer').@file.toString();
				ADOBE_FB_GLOBALPLAYER_SWC_URL = files.(@name == 'FlashPlayer').@path.toString();
				if (!ADOBE_FB_GLOBALPLAYER_SWC_FILE || !ADOBE_FB_GLOBALPLAYER_SWC_URL)
				{
					log(_constants.ERROR_INVALID_FLASH_PLAYER_SWC_URL);
					keepGoing = false;
				}
				ADOBE_FB_GLOBALPLAYER_SWC_URL += ADOBE_FB_GLOBALPLAYER_SWC_FILE;
				
				OSMF_FILE = files.(@name == 'OSMF').@file.toString();
				OSMF_URL = files.(@name == 'OSMF').@path.toString();
				
				TLF_FILE = files.(@name == 'TLF').@file.toString();
				TLF_URL = files.(@name == 'TLF').@path.toString();

				BLAZEDS_FILE = files.(@name == 'BlazeDS').@file.toString();
				BLAZEDS_URL = files.(@name == 'BlazeDS').@path.toString();

				AFE_FILE = files.(@name == 'afe').@file.toString();
				AFE_URL = files.(@name == 'afe').@path.toString();
				
				AGLJ40_FILE = files.(@name == 'aglj40').@file.toString();
				AGLJ40_URL = files.(@name == 'aglj40').@path.toString();
				
				FLEX_FONTKIT_FILE = files.(@name == 'flex-fontkit').@file.toString();
				FLEX_FONTKIT_URL = files.(@name == 'flex-fontkit').@path.toString();
				
				RIDEAU_FILE = files.(@name == 'rideau').@file.toString();
				RIDEAU_URL = files.(@name == 'rideau').@path.toString();
				
				return keepGoing;
			}
			
			protected function setOSSpecificVariables():void
			{
				var operatingSystemStr:String = Capabilities.os;
				
				if (operatingSystemStr.search("Mac OS") != -1)
				{
					_os =  MAC_OS;
				}
				else if (operatingSystemStr.search("Windows") != -1)
				{
					_os = WINDOWS_OS;
				}
				else
				{
					log(_constants.ERROR_UNSUPPORTED_OPERATING_SYSTEM);
				}
			}
			
			protected function main():void
			{
				initiateInstallStepsActivity();
				initializeOptionInstallsDataProvider();
			}
			
			protected function handleInstallBtnClick(event:MouseEvent):void
			{
				if (flexSDKTxtInput.text == "")
				{
					log(_constants.INFO_ENTER_VALID_FLEX_SDK_PATH);
				}
				else
				{
					_langSelect.enabled = false;
					_flexHome = flexSDKTxtInput.text;
					resetInstallStepsActivity();
					addOptionalComponentsToInstallSteps();
					this.currentState = "installState";
					install();
				}
			}
			
			protected function handleFirstStepNextBtnClick(event:MouseEvent):void
			{
				currentState = "optionsState";
			}
			
			protected function initiateInstallStepsActivity():void
			{
				_installationSteps.addItem(new StepItem(_constants.STEP_CREATE_DIRECTORIES));
				_installationSteps.addItem(new StepItem(_constants.STEP_DOWNLOAD_FLEX_SDK));
				_installationSteps.addItem(new StepItem(_constants.STEP_UNZIP_FLEX_SDK));
				_installationSteps.addItem(new StepItem(_constants.STEP_DOWNLOAD_AIR_RUNTIME_KIT));
				_installationSteps.addItem(new StepItem(_constants.STEP_UNZIP_AIR_RUNTIME_KIT));
				_installationSteps.addItem(new StepItem(_constants.STEP_DOWNLOAD_FLASHPLAYER_SWC));
				_installationSteps.addItem(new StepItem(_constants.STEP_INSTALL_CONFIG_FILES));
			}
			
			protected function resetInstallStepsActivity():void
			{
				for each(var step:StepItem in _installationSteps)
				{
					step.status = StepItem.NORMAL;
				}
			}
			
			protected function addOptionalComponentsToInstallSteps():void
			{
				for each (var obj:Object in _optionalInstallsDataProvider)
				{
					if(obj.selected)
					{
						_installationSteps.addItem(new StepItem(obj.label));
					}
				}
			}
			
			protected function initializeOptionInstallsDataProvider():void{
				_optionalInstallsDataProvider.addItem({label:_constants.STEP_OPTIONAL_INSTALL_BLAZEDS,message:_constants.ASK_BLAZEDS,selected:null,installed:false,aborted:false});
				_optionalInstallsDataProvider.addItem({label:_constants.STEP_OPTIONAL_INSTALL_FONTSWF,message:_constants.ASK_FONTSWF,selected:null,installed:false,aborted:false});
				_optionalInstallsDataProvider.addItem({label:_constants.STEP_OPTIONAL_INSTALL_TLF,message:_constants.ASK_TLF,selected:null,installed:false,aborted:false});
				_optionalInstallsDataProvider.addItem({label:_constants.STEP_OPTIONAL_INSTALL_OSMF,message:_constants.ASK_OSMF,selected:null,installed:false,aborted:false});
			}
			
			protected function install():void
			{
				createDirectories();
			}
			

			protected function setCommandLineState():void
			{
				currentState = "commandLineState";
			}
			
			protected function setGUIState():void
			{
				currentState = "guiState";
			}
			
			// TODO Scan for Apache SDKs installed and check if allready modified?
			protected function browseForSDK(event:MouseEvent):void
			{
				var file:File = new File(); 
				
				file.addEventListener(Event.SELECT, flexSDKDirSelected); 
				file.browseForDirectory(_constants.INFO_SELECT_DIRECTORY); 
			}
			
			protected function flexSDKDirSelected(event:Event):void
			{
				var flexPath:String =  File(event.target).nativePath;
				
				/* if (SDKNotPackaged(flexPath))
				{ */
					_flexHome = flexPath;
					flexSDKTxtInput.text = flexPath;
					nextBtn.enabled = true;
					_langSelect.enabled = true;
				//}
			}
			
			protected function validApacheSDK(flexPath:String):Boolean
			{
				var valid:Boolean = true;
				var descriptionFile:String = flexPath + File.separator + "flex-sdk-description.xml";
				var file:File = new File(descriptionFile);
				
				// Check flex SDK diretory has flex description file
				if (!file.exists)
				{
					valid = false;
					flexSDKTxtInput.errorString = _constants.ERROR_INVALID_FLEX_SDK_DIRECTORY;
				}
				
				// TODO Check is Apache not Adobe SDK
				
				return valid;
			}
			
			protected function SDKNotPackaged(flexPath:String):Boolean
			{
				var unpackaged:Boolean = true;
				var playerFile:String = flexPath + File.separator + "frameworks" + File.separator + "libs" + File.separator
					+ "player" + File.separator + "11.1" + File.separator + "playerglobal.swc"; 
				var file:File = new File(playerFile);
				
				// check for existance of  player global
				if (file.exists)
				{
					unpackaged = false;
					flexSDKTxtInput.errorString = _constants.ERROR_INVALID_FLEX_SDK_DIRECTORY;
				}
				
				return unpackaged;
			}
			
			protected function handleFlexSDXTxtInputChange(event:TextOperationEvent):void
			{
				var tempDir:File;
				var path:String = flexSDKTxtInput.text;
				
				try
				{
					tempDir = new File(path);
					
					if (SDKNotPackaged(path))
					{
						flexSDKTxtInput.errorString = "";
						_flexHome = path;
						nextBtn.enabled = true;
						_langSelect.enabled = true;
					}
					else
					{
						flexSDKTxtInput.errorString = _constants.ERROR_INVALID_FLEX_SDK_DIRECTORY;
						nextBtn.enabled = false;
					}
				}
				catch (e:Error)
				{
					flexSDKTxtInput.errorString = _constants.ERROR_INVALID_FLEX_SDK_DIRECTORY;
					nextBtn.enabled = false;
				}
			}
			
			protected function createDirectories():void
			{
				updateActivityStep(_constants.STEP_CREATE_DIRECTORIES, StepItem.ACTIVE);
				
				try
				{
					log(_constants.INFO_CREATING_FLEX_HOME);
					_flexHomeDir = createFolder(_flexHome);
					log(_constants.INFO_CREATING_TEMP_DIR);
					_flexTemp = _flexHome + File.separator + "temp";
					_flexTempDir = createFolder(_flexTemp);
					updateActivityStep(_constants.STEP_CREATE_DIRECTORIES, StepItem.COMPLETE);
					downloadApacheFlexSDK();
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_CREATE_DIRECTORIES, StepItem.ERROR);
					log(_constants.ERROR_UNABLE_TO_CREATE_TEMP_DIRECTORY);
					abortInstallation();
				}
			}
			
			protected function downloadApacheFlexSDK():void
			{
				updateActivityStep(_constants.STEP_DOWNLOAD_FLEX_SDK, StepItem.ACTIVE);
				
				try
				{
					log(_constants.INFO_DOWNLOADING_APACHE_FLEX_SDK + APACHE_FLEX_BIN_DISTRO_URL);
					_apacheFlexSDKZipFile = File.userDirectory.resolvePath(_flexTemp + File.separator + APACHE_FLEX_BIN_DISTRO_FILE); 
					copyOrDownload(APACHE_FLEX_BIN_DISTRO_URL, handleApacheFlexSDKDownload, _apacheFlexSDKZipFile, handleApacheFlexSDKDownloadError);
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_DOWNLOAD_FLEX_SDK, StepItem.ERROR);
					abortInstallation();
				}
				
			}
			
			protected function handleApacheFlexSDKDownload(event:Event):void
			{
				try
				{
					var fs:FileStream = new FileStream(); 
					fs.open(_apacheFlexSDKZipFile, FileMode.WRITE); 
					fs.writeBytes(event.target.data);
					fs.close();
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_DOWNLOAD_FLEX_SDK, StepItem.ERROR);
					abortInstallation();
				}
				
				updateActivityStep(_constants.STEP_DOWNLOAD_FLEX_SDK, StepItem.COMPLETE);	
				unzipApacheFlexSDK();
			}
			
			protected function handleApacheFlexSDKDownloadError(event:*=null):void{
				updateActivityStep(_constants.STEP_DOWNLOAD_FLEX_SDK, StepItem.ERROR);
				log(_constants.ERROR_UNABLE_TO_DOWNLOAD_FLEX_SDK);
				abortInstallation();
			}
			
			protected function unzipApacheFlexSDK():void
			{
				updateActivityStep(_constants.STEP_UNZIP_FLEX_SDK, StepItem.ACTIVE);
				
				try
				{
					log(_constants.INFO_UNZIPPING + _apacheFlexSDKZipFile.nativePath);
					unzip(_apacheFlexSDKZipFile, handleApacheFlexSDKZipFileUnzipComplete, handleApacheFlexSDKZipFileUnzipError);
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_UNZIP_FLEX_SDK, StepItem.ERROR);
					abortInstallation();
				}
			}
			
			protected function handleApacheFlexSDKZipFileUnzipComplete(event:Event):void
			{
				log(_constants.INFO_FINISHED_UNZIPPING + _apacheFlexSDKZipFile.nativePath);
				updateActivityStep(_constants.STEP_UNZIP_FLEX_SDK, StepItem.COMPLETE);
				
				if (_os == WINDOWS_OS)
				{
					downloadAIRRuntimeKitForWindows();
				}
				else if (_os == MAC_OS)
				{ 
					downloadAIRRuntimeKitForMac();
				}
			}
			
			protected function handleApacheFlexSDKZipFileUnzipError(error:ErrorEvent=null):void
			{
				updateActivityStep(_constants.STEP_UNZIP_FLEX_SDK, StepItem.ERROR);
				abortInstallation();
			}
			
			protected function downloadAIRRuntimeKitForWindows():void
			{
				updateActivityStep(_constants.STEP_DOWNLOAD_AIR_RUNTIME_KIT, StepItem.ACTIVE);
				
				try
				{
					log(_constants.INFO_DOWLOADING_AIR_RUNTIME_KIT_WINDOWS + ADOBE_AIR_SDK_WIN_URL);
					_adobeAIRSDKZipFile = File.userDirectory.resolvePath(_flexTemp + File.separator + ADOBE_AIR_SDK_WIN_FILE);
					copyOrDownload(ADOBE_AIR_SDK_WIN_URL, handleAIRSDKDownload, _adobeAIRSDKZipFile, handleAIRSDKDownloadError);
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_DOWNLOAD_AIR_RUNTIME_KIT, StepItem.ERROR);
					abortInstallation();
				}
			}
			
			protected function downloadAIRRuntimeKitForMac():void
			{
				updateActivityStep(_constants.STEP_DOWNLOAD_AIR_RUNTIME_KIT, StepItem.ACTIVE);
				
				try
				{
					log(_constants.INFO_DOWLOADING_AIR_RUNTIME_KIT_MAC + ADOBE_AIR_SDK_MAC_URL);
					_adobeAIRSDKZipFile = File.userDirectory.resolvePath(_flexTemp + File.separator + ADOBE_AIR_SDK_MAC_FILE);
					copyOrDownload(ADOBE_AIR_SDK_MAC_URL, handleAIRSDKDownload, _adobeAIRSDKZipFile, handleAIRSDKDownloadError);
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_DOWNLOAD_AIR_RUNTIME_KIT, StepItem.ERROR);
					abortInstallation();
				}
			}
			
			protected function handleAIRSDKDownload(event:Event):void
			{
				try
				{
					var fs:FileStream = new FileStream();
					fs.open(_adobeAIRSDKZipFile, FileMode.WRITE);
					fs.writeBytes(event.target.data); 
					fs.close();
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_DOWNLOAD_AIR_RUNTIME_KIT, StepItem.ERROR);
					abortInstallation();
				}
				
				updateActivityStep(_constants.STEP_DOWNLOAD_AIR_RUNTIME_KIT, StepItem.COMPLETE);
				
				unzipAdobeAIRSDK();
			}
			
			protected function handleAIRSDKDownloadError(error:*=null):void
			{
				updateActivityStep(_constants.STEP_DOWNLOAD_AIR_RUNTIME_KIT, StepItem.ERROR);
				log(_constants.ERROR_UNABLE_TO_DOWNLOAD_AIR_SDK);
				abortInstallation();
			}
			
			protected function unzipAdobeAIRSDK():void
			{
				updateActivityStep(_constants.STEP_UNZIP_AIR_RUNTIME_KIT, StepItem.ACTIVE);
				
				try
				{
					if (_os == WINDOWS_OS)
					{
						log(_constants.INFO_UNZIPPING + _adobeAIRSDKZipFile.nativePath);
						unzip(_adobeAIRSDKZipFile, handleAdobeAIRSDKWinZipFileUnzipComplete, handleAdobeAIRSDKWinZipFileUnzipError);
						
					}
					else if (_os == MAC_OS)
					{
						if (NativeProcess.isSupported)
						{
							untar(_adobeAIRSDKZipFile, _flexHomeDir, handleAdobeAIRSDKMacUntarComplete, handleAdobeAIRSDKMacUntarError);
						}
						else
						{
							log(_constants.ERROR_NATIVE_PROCESS_NOT_SUPPORTED);
							updateActivityStep(_constants.STEP_UNZIP_AIR_RUNTIME_KIT, StepItem.ERROR);
						}
					}
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_UNZIP_AIR_RUNTIME_KIT, StepItem.ERROR);
					abortInstallation();
				}
			}
			
			protected function handleAdobeAIRSDKMacUntarError(error:ProgressEvent=null):void{
				updateActivityStep(_constants.STEP_UNZIP_AIR_RUNTIME_KIT, StepItem.ERROR);
				abortInstallation();
			}
			
			protected function handleAdobeAIRSDKMacUntarComplete(event:Event):void
			{
				updateActivityStep(_constants.STEP_UNZIP_AIR_RUNTIME_KIT, StepItem.COMPLETE);
				log(_constants.INFO_FINISHED_UNTARING + _adobeAIRSDKZipFile.nativePath);
				downloadPlayerGlobalSWC();
			}
			
			protected function handleAdobeAIRSDKWinZipFileUnzipComplete(event:Event):void
			{
				updateActivityStep(_constants.STEP_UNZIP_AIR_RUNTIME_KIT, StepItem.COMPLETE);
				log(_constants.INFO_FINISHED_UNZIPPING + _adobeAIRSDKZipFile.nativePath);
				downloadPlayerGlobalSWC();
			}
			
			protected function handleAdobeAIRSDKWinZipFileUnzipError(error:ErrorEvent=null):void{
				updateActivityStep(_constants.STEP_UNZIP_AIR_RUNTIME_KIT, StepItem.ERROR);
			}
			
			protected function downloadPlayerGlobalSWC():void
			{
				updateActivityStep(_constants.STEP_DOWNLOAD_FLASHPLAYER_SWC, StepItem.ACTIVE);
				
				try
				{
					log(_constants.INFO_INSTALLING_PLAYERGLOBAL_SWC + ADOBE_FB_GLOBALPLAYER_SWC_URL);
					_fbGlobalPlayerDir = createFolder(_flexHome + File.separator + "frameworks" + File.separator + "libs" + File.separator + "player" + File.separator + "11.1");
					_fbGlobalPlayerFile = File.userDirectory.resolvePath(_fbGlobalPlayerDir.nativePath + File.separator + "playerglobal.swc");
					copyOrDownload(ADOBE_FB_GLOBALPLAYER_SWC_URL, handlePlayerGlobalDownload, _fbGlobalPlayerFile, handlePlayerGlobalDownloadError);
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_DOWNLOAD_FLASHPLAYER_SWC, StepItem.ERROR);
					abortInstallation();
				}
			}
			
			protected function handlePlayerGlobalDownload(event:Event):void
			{
				try
				{
					var playerGlobalFile:File = File.userDirectory.resolvePath(_fbGlobalPlayerDir.nativePath + File.separator + "playerglobal.swc");
					var fs:FileStream = new FileStream();
					fs.open(playerGlobalFile, FileMode.WRITE);
					fs.writeBytes(event.target.data); 
					fs.close();
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_DOWNLOAD_FLASHPLAYER_SWC, StepItem.ERROR);
					abortInstallation();
				}
				updateActivityStep(_constants.STEP_DOWNLOAD_FLASHPLAYER_SWC, StepItem.COMPLETE);
				copyConfigFiles();
			}
			
			protected function handlePlayerGlobalDownloadError(event:ErrorEvent=null):void
			{
				updateActivityStep(_constants.STEP_DOWNLOAD_FLASHPLAYER_SWC, StepItem.ERROR);
				log(_constants.ERROR_UNABLE_TO_DOWNLOAD_FLASH_PLAYER_SWC);
				abortInstallation();
			}
			
			protected function copyConfigFiles():void
			{
				var aborted:Boolean = false;
				
				updateActivityStep(_constants.STEP_INSTALL_CONFIG_FILES, StepItem.ACTIVE);
				
				try
				{
					//Config files
					var configFilesDir:File = File.userDirectory.resolvePath(_flexHome + File.separator + "ide" + File.separator + "flashbuilder" + File.separator + "config");
					var configFiles:Array = configFilesDir.getDirectoryListing();
					var flexHomeFrameworksDir:File = File.userDirectory.resolvePath(_flexHome + File.separator + "frameworks");
					log(_constants.INFO_INSTALLING_CONFIG_FILES);
					
					for each (var file:File in configFiles)
					{
						if (isValidConfigFile(file))
						{
							var copyToFile:File = flexHomeFrameworksDir.resolvePath(file.name);
							file.copyTo(copyToFile,true);
						}
					}
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_INSTALL_CONFIG_FILES, StepItem.ERROR);
					log(_constants.ERROR_UNABLE_TO_INSTALL_CONFIG_FILES);
					abortInstallation();
					aborted = true;
				}
				
				
				if (!aborted)
				{
					updateActivityStep(_constants.STEP_INSTALL_CONFIG_FILES, StepItem.COMPLETE);
					//cleanup();
					installNextOptionalComponent();
				}
			}
			
			protected function installNextOptionalComponent():void
			{
				for each (var obj:Object in _optionalInstallsDataProvider)
				{
					if(obj.selected && !obj.installed && !obj.aborted)
					{
						switch(obj.label)
						{
							case _constants.STEP_OPTIONAL_INSTALL_BLAZEDS:
							{
								installBlazeDS();
								return;
								break;
							}
							 case _constants.STEP_OPTIONAL_INSTALL_FONTSWF:
							{
								installFontSwf();
								return;
								break;
							}
							case _constants.STEP_OPTIONAL_INSTALL_OSMF:
							{
								installOSMF();
								return;
								break;
							}
							case _constants.STEP_OPTIONAL_INSTALL_TLF:
							{
								installTLF();
								return;
								break;
							} 
							default:
							{
								break;
							}
						}
					}
				}
				checkAndHandleAllOptionalComponentsInstalled();
			}
			
			protected function installBlazeDS():void
			{
				updateActivityStep(_constants.STEP_OPTIONAL_INSTALL_BLAZEDS, StepItem.ACTIVE);
				log(StringUtil.substitute(_constants.INFO_DOWNLOADING_FILE_FROM,[BLAZEDS_FILE,BLAZEDS_URL]));
				_blazeDSJarFile = File.userDirectory.resolvePath(_flexTemp + File.separator + BLAZEDS_FILE);
				copyOrDownload(BLAZEDS_URL+BLAZEDS_FILE,handleBlazeDSDownloadComplete,null,handleBlazeDSInstallError);
			}
			
			protected function handleBlazeDSDownloadComplete(event:Event):void
			{
				try
				{
					var fs:FileStream = new FileStream(); 
					fs.open(_blazeDSJarFile, FileMode.WRITE); 
					fs.writeBytes(event.target.data); 
					fs.close();

					copyFileToOptionalLibDir(_blazeDSJarFile);
					updateOptionalComponentInstallStatus(_constants.STEP_OPTIONAL_INSTALL_BLAZEDS,true);
					updateOptionalComponentInstallStatusAborted(_constants.STEP_OPTIONAL_INSTALL_BLAZEDS,false);
					updateActivityStep(_constants.STEP_OPTIONAL_INSTALL_BLAZEDS, StepItem.COMPLETE);
					clearData(URLLoader(event.target));
					installNextOptionalComponent();
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_OPTIONAL_INSTALL_BLAZEDS, StepItem.ERROR);
					updateOptionalComponentInstallStatusAborted(_constants.STEP_OPTIONAL_INSTALL_BLAZEDS,true);
					installNextOptionalComponent();
				}
			}
			
			protected function installFontSwf():void
			{
				updateActivityStep(_constants.STEP_OPTIONAL_INSTALL_FONTSWF,StepItem.ACTIVE);
				downloadFontSwfAFEFile();
			}
			
			protected function downloadFontSwfAFEFile():void
			{
				log(StringUtil.substitute(_constants.INFO_DOWNLOADING_FILE_FROM,[AFE_FILE,AFE_URL]));
				_afeJarFile = File.userDirectory.resolvePath(_flexTemp + File.separator + AFE_FILE);
				copyOrDownload(AFE_URL+AFE_FILE,handleFontSWFAFEFileDownloaded,null,handleFontSWFInstallError);
			}
			
			protected function handleFontSWFAFEFileDownloaded(event:Event):void
			{
				try
				{
					var fs:FileStream = new FileStream(); 
					fs.open(_afeJarFile, FileMode.WRITE); 
					fs.writeBytes(event.target.data); 
					fs.close();
					
					copyFileToOptionalLibDir(_afeJarFile);
					clearData(URLLoader(event.target));
					
					downloadFontSwfAGLFile();
					
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_OPTIONAL_INSTALL_FONTSWF, StepItem.ERROR);
					updateOptionalComponentInstallStatusAborted(_constants.STEP_OPTIONAL_INSTALL_FONTSWF,true);
					installNextOptionalComponent();
				}
			}
			
			protected function downloadFontSwfAGLFile():void
			{
				log(StringUtil.substitute(_constants.INFO_DOWNLOADING_FILE_FROM,[AGLJ40_FILE,AGLJ40_URL]));
				_aglj40JarFile = File.userDirectory.resolvePath(_flexTemp + File.separator + AGLJ40_FILE);
				copyOrDownload(AGLJ40_URL+AGLJ40_FILE,handleFontSWFAGLFileDownloaded,null,handleFontSWFInstallError);
			}
			
			protected function handleFontSWFAGLFileDownloaded(event:Event):void
			{
				try
				{
					var fs:FileStream = new FileStream(); 
					fs.open(_aglj40JarFile, FileMode.WRITE); 
					fs.writeBytes(event.target.data); 
					fs.close();
					
					copyFileToOptionalLibDir(_aglj40JarFile);
					clearData(URLLoader(event.target));
					
					downloadFontSwfFlexFontKitFile();
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_OPTIONAL_INSTALL_FONTSWF, StepItem.ERROR);
					updateOptionalComponentInstallStatusAborted(_constants.STEP_OPTIONAL_INSTALL_FONTSWF,true);
					installNextOptionalComponent();
				}
			}
			
			protected function downloadFontSwfFlexFontKitFile():void
			{
				log(StringUtil.substitute(_constants.INFO_DOWNLOADING_FILE_FROM,[FLEX_FONTKIT_FILE,FLEX_FONTKIT_URL]));
				_flexFontKitJarFile = File.userDirectory.resolvePath(_flexTemp + File.separator + FLEX_FONTKIT_FILE);
				copyOrDownload(FLEX_FONTKIT_URL+FLEX_FONTKIT_FILE,handleFontSWFFlexFontKitFileDownloaded,null,handleFontSWFInstallError);
			}
			
			protected function handleFontSWFFlexFontKitFileDownloaded(event:Event):void
			{
				try
				{
					var fs:FileStream = new FileStream(); 
					fs.open(_flexFontKitJarFile, FileMode.WRITE); 
					fs.writeBytes(event.target.data); 
					fs.close();
					
					copyFileToOptionalLibDir(_flexFontKitJarFile);
					clearData(URLLoader(event.target));
					
					downloadFontSwfRideauKitFile();
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_OPTIONAL_INSTALL_FONTSWF, StepItem.ERROR);
					updateOptionalComponentInstallStatusAborted(_constants.STEP_OPTIONAL_INSTALL_FONTSWF,true);
					installNextOptionalComponent();
				}
			}
			
			protected function downloadFontSwfRideauKitFile():void
			{
				log(StringUtil.substitute(_constants.INFO_DOWNLOADING_FILE_FROM,[RIDEAU_FILE,RIDEAU_URL]));
				_rideauJarFile = File.userDirectory.resolvePath(_flexTemp + File.separator + RIDEAU_FILE);
				copyOrDownload(RIDEAU_URL+RIDEAU_FILE,handleFontSWFRideauFileDownloaded,null,handleFontSWFInstallError);
			}
			
			protected function handleFontSWFRideauFileDownloaded(event:Event):void
			{
				try
				{
					var fs:FileStream = new FileStream(); 
					fs.open(_rideauJarFile, FileMode.WRITE); 
					fs.writeBytes(event.target.data); 
					fs.close();
					
					copyFileToOptionalLibDir(_rideauJarFile);
					clearData(URLLoader(event.target));
					
					updateOptionalComponentInstallStatus(_constants.STEP_OPTIONAL_INSTALL_FONTSWF,true);
					updateOptionalComponentInstallStatusAborted(_constants.STEP_OPTIONAL_INSTALL_FONTSWF,false);
					updateActivityStep(_constants.STEP_OPTIONAL_INSTALL_FONTSWF, StepItem.COMPLETE);
					installNextOptionalComponent(); 
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_OPTIONAL_INSTALL_FONTSWF, StepItem.ERROR);
					updateOptionalComponentInstallStatusAborted(_constants.STEP_OPTIONAL_INSTALL_FONTSWF,true);
					installNextOptionalComponent();
				}
			}
			
			protected function installOSMF():void
			{
				updateActivityStep(_constants.STEP_OPTIONAL_INSTALL_OSMF,StepItem.ACTIVE);
				downloadOSMFFile();
			}
			
			protected function downloadOSMFFile():void
			{
				log(StringUtil.substitute(_constants.INFO_DOWNLOADING_FILE_FROM,[OSMF_FILE,OSMF_URL]));
				_osmfFile = File.userDirectory.resolvePath(_flexTemp + File.separator + OSMF_FILE);
				copyOrDownload(OSMF_URL+OSMF_FILE,handleOSMFFileDownloaded,null,handleOSMFInstallError);
			}
			
			protected function handleOSMFFileDownloaded(event:Event):void
			{
				try
				{
					var fs:FileStream = new FileStream(); 
					fs.open(_osmfFile, FileMode.WRITE); 
					fs.writeBytes(event.target.data); 
					fs.close();
					
					copyFileToLibDir(_osmfFile);
					clearData(URLLoader(event.target));
					
					updateOptionalComponentInstallStatus(_constants.STEP_OPTIONAL_INSTALL_OSMF,true);
					updateOptionalComponentInstallStatusAborted(_constants.STEP_OPTIONAL_INSTALL_OSMF,false);
					updateActivityStep(_constants.STEP_OPTIONAL_INSTALL_OSMF, StepItem.COMPLETE);
					installNextOptionalComponent();
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_OPTIONAL_INSTALL_OSMF, StepItem.ERROR);
					updateOptionalComponentInstallStatusAborted(_constants.STEP_OPTIONAL_INSTALL_OSMF,true);
					installNextOptionalComponent();
				}
			}
			
			protected function installTLF():void
			{
				updateActivityStep(_constants.STEP_OPTIONAL_INSTALL_TLF,StepItem.ACTIVE);
				downloadTLFFile();
			}
			
			protected function downloadTLFFile():void
			{
				log(StringUtil.substitute(_constants.INFO_DOWNLOADING_FILE_FROM,[TLF_FILE,TLF_URL]));
				_tlfFile = File.userDirectory.resolvePath(_flexTemp + File.separator + TLF_FILE);
				copyOrDownload(TLF_URL+TLF_FILE,handleTLFFileDownloaded,null,handleTLFInstallError);
			}
			
			protected function handleTLFFileDownloaded(event:Event):void
			{
				try
				{
					var fs:FileStream = new FileStream(); 
					fs.open(_tlfFile, FileMode.WRITE); 
					fs.writeBytes(event.target.data);
					fs.close();
					
					copyFileToLibDir(_tlfFile);
					clearData(URLLoader(event.target));
					
					updateOptionalComponentInstallStatus(_constants.STEP_OPTIONAL_INSTALL_TLF,true);
					updateOptionalComponentInstallStatusAborted(_constants.STEP_OPTIONAL_INSTALL_TLF,false);
					updateActivityStep(_constants.STEP_OPTIONAL_INSTALL_TLF, StepItem.COMPLETE);
					installNextOptionalComponent();
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_OPTIONAL_INSTALL_TLF, StepItem.ERROR);
					updateOptionalComponentInstallStatusAborted(_constants.STEP_OPTIONAL_INSTALL_TLF,true);
					installNextOptionalComponent();
				}
			}
			
			protected function copyFileToOptionalLibDir(file:File):void
			{
				//Copy to "${FLEX_HOME}/lib/external/optional"
				var copyToFile:File = _flexHomeDir.resolvePath("lib" + File.separator + "external" + File.separator + "optional" + File.separator + file.name);
				file.copyTo(copyToFile,true);
			}
			
			protected function copyFileToLibDir(file:File):void
			{
				//Copy to "${FLEX_HOME}/lib/external/optional"
				var copyToFile:File = _flexHomeDir.resolvePath("frameworks" + File.separator + "libs" + File.separator + file.name);
				file.copyTo(copyToFile,true);
			}
			
/* 			protected function downloadAdobeFlexSDK(callAfterDownloadFunction:Function):void
			{
			try
			{
			_adobeFlexSDKZipFile = File.userDirectory.resolvePath(_flexTemp + File.separator + ADOBE_FLEX_4_6_FILE);
			var errorHandler:Function = getErrorHandlerFromStep(_currentOptionalStep);
			copyOrDownload(ADOBE_FLEX_4_6_URL + ADOBE_FLEX_4_6_FILE, callAfterDownloadFunction, _adobeFlexSDKZipFile, errorHandler);
			}
			catch (e:Error)
			{
			updateActivityStep(_currentOptionalStep.label, StepItem.ERROR);
			installNextOptionalComponent();
			}
			} */
			
/* 			protected function getErrorHandlerFromStep(step:StepItem):Function
			{
				if(step.label == _constants.STEP_OPTIONAL_INSTALL_BLAZEDS)
				{
					return handleBlazeDSInstallError;
				}
				else if (step.label == _constants.STEP_OPTIONAL_INSTALL_FONTSWF)
				{
					return handleFontSWFInstallError;
				}
				return null;
			} */
			
			protected function handleBlazeDSInstallError(event:*=null):void{
				updateActivityStep(_constants.STEP_OPTIONAL_INSTALL_BLAZEDS, StepItem.ERROR);
				updateOptionalComponentInstallStatusAborted(_constants.STEP_OPTIONAL_INSTALL_BLAZEDS,true);
				log(StringUtil.substitute(_constants.ERROR_UNABLE_TO_DOWNLOAD_FILE,["BlazeDS"]));
				installNextOptionalComponent();
			}

			protected function handleFontSWFInstallError(event:*=null):void{
				updateActivityStep(_constants.STEP_OPTIONAL_INSTALL_FONTSWF, StepItem.ERROR);
				updateOptionalComponentInstallStatusAborted(_constants.STEP_OPTIONAL_INSTALL_FONTSWF,true);
				log(StringUtil.substitute(_constants.ERROR_UNABLE_TO_DOWNLOAD_FILE,["FontSwf Utility"]));
				installNextOptionalComponent();
			}

			protected function handleOSMFInstallError(event:*=null):void{
				updateActivityStep(_constants.STEP_OPTIONAL_INSTALL_OSMF, StepItem.ERROR);
				updateOptionalComponentInstallStatusAborted(_constants.STEP_OPTIONAL_INSTALL_OSMF,true);
				log(StringUtil.substitute(_constants.ERROR_UNABLE_TO_DOWNLOAD_FILE,["OSMF"]));
				installNextOptionalComponent();
			}

			protected function handleTLFInstallError(event:*=null):void{
				updateActivityStep(_constants.STEP_OPTIONAL_INSTALL_TLF, StepItem.ERROR);
				updateOptionalComponentInstallStatusAborted(_constants.STEP_OPTIONAL_INSTALL_TLF,true);
				log(StringUtil.substitute(_constants.ERROR_UNABLE_TO_DOWNLOAD_FILE,["TLF"]));
				installNextOptionalComponent();
			}
			
			protected function updateOptionalComponentInstallStatus(label:String,isInstalled:Boolean):void
			{
				for each (var obj:Object in _optionalInstallsDataProvider)
				{
					if(obj.label == label)
					{
						obj.installed = isInstalled;
					}
				}
			}
			
			protected function updateOptionalComponentInstallStatusAborted(label:String,isAborted:Boolean):void
			{
				for each (var obj:Object in _optionalInstallsDataProvider)
				{
					if(obj.label == label)
					{
						obj.aborted = isAborted;
					}
				}
			}
			
			protected function checkAndHandleAllOptionalComponentsInstalled():void
			{
				var allComponentsInstalled:Boolean = true;
				for each (var obj:Object in _optionalInstallsDataProvider)
				{
					if(obj.selected && !(obj.installed || obj.aborted))
					{
						allComponentsInstalled = false;
					}
				}
				if(allComponentsInstalled)
				{
					cleanup(false);	
				}
			}
			
			protected function cleanup(isAbort:Boolean=false):void
			{
				try
				{
					_flexTempDir.deleteDirectory(true);
				}
				catch (e:Error)
				{
					log(_constants.ERROR_UNABLE_TO_DELETE_TEMP_DIRECTORY);	
				}
				
				if (!isAbort)
				{
					log(_constants.INFO_INSTALLATION_COMPLETE);
					browseBtn.enabled = true;
				}
			}
			
			protected function abortInstallation():void{
				cleanup(true);
				log(_constants.INFO_ABORT_INSTALLATION);
			}
			
			protected function _langSelect_changeHandler(event:IndexChangeEvent):void
			{
				if (_langSelect.selectedItem["data"] == _runtimeLocale.defaultLanguage)
				{
					resourceManager.localeChain = [_runtimeLocale.defaultLanguage];
					resourceManager.update();
				}
				else
				{
					resourceManager.localeChain = [_langSelect.selectedItem["data"],_runtimeLocale.defaultLanguage];
					resourceManager.update();	
				}	
			}
			
			override protected function resourcesChanged():void
			{
				super.resourcesChanged();
				
				if (browseBtn)
				{
					browseBtn.label = _constants.BROWSE_BTN_LABEL;
				}
				if (installBtn)
				{
					installBtn.label = _constants.INSTALL_BTN_LABEL;
				}
				if (installLogBtn)
				{
					installLogBtn.label = _constants.INSTALL_LOG_BTN_LABEL;
				}
				if (closeBtn)
				{
					closeBtn.label = _constants.CLOSE_BTN_LABEL;
				}
				if (flexSDKTxtInput)
				{
					flexSDKTxtInput.prompt = _constants.SELECT_PATH_PROMPT;
				}
			}
			
			protected function placeFirstGroup():void
			{
				firstStepGroup.x = this.width/2 - firstStepGroup.width/2;
			}
			
			protected function placeSecondGroup():void
			{
				secondStepGroup.x = this.width/2 - secondStepGroup.width/2;
			}
			
			protected function placeThirdGroup():void
			{
				thirdStepGroup.x = this.width/2 - thirdStepGroup.width/2;
			}
			
			protected function handleOptionalInstallsChange(event:IndexChangeEvent):void
			{
				installRdBtn.visible = true;
				dontInstallRdBtn.visible = true;
				var selectedItem:Object = event.target.selectedItem;
				optionalInstallsTxtArea.text = selectedItem.message;
				if(selectedItem.selected == true)
				{
					installPermissionRbtnGrp.selection = installRdBtn;
				}
				else if(selectedItem.selected == false)
				{
					installPermissionRbtnGrp.selection = dontInstallRdBtn;	
				}
				else
				{
					installPermissionRbtnGrp.selection = null;
				}
				if(selectedItem.message == _constants.ASK_OSMF || selectedItem.message == _constants.ASK_TLF)
				{
					mplLicenseBtn.includeInLayout = mplLicenseBtn.visible = true;
					adobeLicenseBtn.includeInLayout = adobeLicenseBtn.visible = false;
				}
				if(selectedItem.message == _constants.ASK_BLAZEDS || selectedItem.message == _constants.ASK_FONTSWF)
				{
					mplLicenseBtn.includeInLayout = mplLicenseBtn.visible = false;
					adobeLicenseBtn.includeInLayout = adobeLicenseBtn.visible = true;
				}
			}
			
			protected function handleInstallPermissionChange(event:Event):void
			{
				optionalComponentsList.selectedItem.selected = (event.target.selectedValue==_constants.INSTALL)?true:false;
				checkIfAllOptionalComponentsPromptsAnswered();
			}
			
			protected function checkIfAllOptionalComponentsPromptsAnswered():void
			{
				var success:Boolean = true;
				for each (var obj:Object in _optionalInstallsDataProvider)
				{
					if(obj.selected == null)
					{
						success = false;
					}
				}
				installBtn.enabled = success;
			}
			
			/************************ Utility methods *****************/
			
			private function createFolder(path:String):File
			{
				var dir:File = new File(path);
				
				dir.createDirectory();
				
				return dir;
			}
			
			private function copyOrDownload(url:String, handlerFunction:Function, dest:File, errorFunction:Function=null):void
			{
				if (url.search("http") == 0)
				{
					download(url, handlerFunction,errorFunction);
				}
				else
				{
					var source:File = new File(url);
					
					try
					{
						source.copyTo(dest, true);
					}
					catch (error:Error)
					{
						if (errorFunction != null)
						{
							errorFunction.call(null);
						}
						log(_constants.ERROR_UNABLE_TO_COPY_FILE + error.errorID + " " + error.message);
					}
				}
			}
			
			private function download(url:String, handlerFunction:Function, errorFunction:Function=null):void
			{
				var loader:URLLoader = new URLLoader();
				var req:URLRequest = new URLRequest(url);
				
				loader.dataFormat = URLLoaderDataFormat.BINARY; 
				loader.addEventListener(Event.COMPLETE, handlerFunction);
				loader.addEventListener(Event.COMPLETE, handleDownloadComplete);
				
				if (errorFunction != null)
				{
					loader.addEventListener(ErrorEvent.ERROR,errorFunction);
					loader.addEventListener(IOErrorEvent.IO_ERROR,errorFunction);
				}
				loader.addEventListener(ProgressEvent.PROGRESS, handleDownloadProgress);
				
				loader.load(req);
			}
			
			private function handleDownloadProgress(event:ProgressEvent):void
			{
				var bytesTotal:int = event.bytesTotal;
				var bytesLoaded:int = event.bytesLoaded;
				var percentLoaded:int = Math.round(bytesLoaded*100/bytesTotal);
				
				// show count in command line progress bar in gui
				if (currentState == "commandLineState" && percentLoaded % 10 == 0 && percentLoaded != _previousDisplayedPercent)
				{
					log(_constants.INFO_DOWNLOADED + percentLoaded + "%");
					_previousDisplayedPercent = percentLoaded;
				}
				else
				{
					progressBar.percent = percentLoaded;
				}
			}
			
			private function handleDownloadComplete(event:Event):void
			{
				_previousDisplayedPercent = 0;
				clearData(URLLoader(event.target));
			}
			
			private function clearData(v:URLLoader):void
			{
				ByteArray(v.data).clear();
				System.gc();
			}
			
			private function unzip(fileToUnzip:File, unzipCompleteFunction:Function, unzipErrorFunction:Function=null):void
			{
				var zipFileBytes:ByteArray = new ByteArray();
				var fs:FileStream = new FileStream();
				var fzip:Zip = new Zip();
				
				fs.open(fileToUnzip, FileMode.READ);
				fs.readBytes(zipFileBytes);
				fs.close();
				
				fzip.addEventListener(ZipEvent.FILE_LOADED, onFileLoaded);
				fzip.addEventListener(Event.COMPLETE, unzipCompleteFunction);
				fzip.addEventListener(Event.COMPLETE, onUnzipComplete);
				if (unzipErrorFunction != null)
				{
					fzip.addEventListener(ErrorEvent.ERROR,unzipErrorFunction);
					_fileUnzipErrorFunction = unzipErrorFunction
				}
				fzip.loadBytes(zipFileBytes);
			}

			private function onFileLoaded(e:ZipEvent):void
			{
				try
				{
					var fzf:ZipFile = e.file;
					var f:File = _flexHomeDir.resolvePath(fzf.filename);
					var fs:FileStream = new FileStream();
					
					if (fzf.sizeUncompressed == 0 && fzf.sizeCompressed == 0)
					{
						// Is a directory, not a file. Dont try to write anything into it.    
						return;
					}
					
					fs.open(f, FileMode.WRITE);
					fs.writeBytes(fzf.content);
					fs.close();
					
				}
				catch (error:Error)
				{
					_fileUnzipErrorFunction.call();
				}
			}
			
			private function onUnzipComplete(event:Event):void
			{
				var fzip:Zip = event.target as Zip;
				
				fzip.removeEventListener(ZipEvent.FILE_LOADED, onFileLoaded);
				fzip.removeEventListener(Event.COMPLETE, onUnzipComplete);
			}
			
			private function untar(source:File,destination:File,unTarCompleteFunction:Function,unTarErrorFunction:Function):void
			{
				var tar:File = new File("/usr/bin/tar");
				var startupInfo:NativeProcessStartupInfo = new NativeProcessStartupInfo();
				var arguments:Vector.<String> = new Vector.<String>();
				
				arguments.push("xf");
				arguments.push(source.nativePath);
				arguments.push("-C");
				arguments.push(destination.nativePath);
				
				startupInfo.executable = tar;
				startupInfo.arguments = arguments;
				
				_process = new NativeProcess();
				_process.addEventListener(ProgressEvent.STANDARD_OUTPUT_DATA, unTarFileProgress);
				_process.addEventListener(ProgressEvent.STANDARD_ERROR_DATA, unTarErrorFunction);
				_process.addEventListener(ProgressEvent.STANDARD_ERROR_DATA, unTarError);
				_process.addEventListener(NativeProcessExitEvent.EXIT, unTarCompleteFunction);
				_process.addEventListener(NativeProcessExitEvent.EXIT, unTarComplete);
				_process.start(startupInfo);
			}
			
			protected function unTarError(event:Event):void
			{
				var output:String = _process.standardError.readUTFBytes(_process.standardError.bytesAvailable);
				
				log(_constants.ERROR_NATIVE_PROCESS_ERROR);
				log(output);
			}
			
			protected function unTarFileProgress(event:Event):void
			{
				var output:String = _process.standardOutput.readUTFBytes(_process.standardOutput.bytesAvailable);
				
				log(output);
			}
			
			protected function unTarComplete(event:NativeProcessExitEvent):void
			{
				_process.closeInput();
				_process.exit(true);
			}
			
			
			private function isValidConfigFile(file:File):Boolean
			{
				var name:String = file.name;
				
				if (name.search("-config.xml") == -1)
				{
					return false;
				}
				else
				{
					return true;
				}
			}
			
			private function log(text:String):void
			{
				_messages.addItem(text);
			}
			
			private function showConsole(event:Event):void 
			{
				var console:ConsoleWindow = new ConsoleWindow();
				
				console.messages = _messages;
				console.open();
				console.nativeWindow.x = this.nativeWindow.x + this.nativeWindow.width/2 - console.nativeWindow.width/2;
				console.nativeWindow.y = this.nativeWindow.y + this.nativeWindow.height/2 - console.nativeWindow.height/2;
			}

			private function showMPLLicense(event:Event):void 
			{
				var licenseWindow:MPLLicense = new MPLLicense();
				licenseWindow.open();
				licenseWindow.nativeWindow.x = this.nativeWindow.x + this.nativeWindow.width/2 - licenseWindow.nativeWindow.width/2;
				licenseWindow.nativeWindow.y = this.nativeWindow.y + this.nativeWindow.height/2 - licenseWindow.nativeWindow.height/2;
			}
			
			private function showAdobeLicense(event:Event):void 
			{
				var licenseWindow:AdobeLicense = new AdobeLicense();
				licenseWindow.open();
				licenseWindow.nativeWindow.x = this.nativeWindow.x + this.nativeWindow.width/2 - licenseWindow.nativeWindow.width/2;
				licenseWindow.nativeWindow.y = this.nativeWindow.y + this.nativeWindow.height/2 - licenseWindow.nativeWindow.height/2;
			}
			
			private function closeApplication(event:Event):void 
			{
				// TODO only enable close button when finished or when an error occurs
				// TODO anything we need to clean up?
				close();
			}
			
			protected function clickLogo(event:MouseEvent):void
			{
				var url:String = _constants.APACHE_FLEX_URL; 
				var urlReq:URLRequest = new URLRequest(url); 
				
				navigateToURL(urlReq);
			}
			
			protected function getStepItemFromStepLabel(stepLabel:String):StepItem{
				for each(var s:StepItem in _installationSteps)
				{
					if (s.label == stepLabel)
					{
						return s;
					}
				}
				return null;
			}
			
			protected function updateActivityStep(stepLabel:String,status:String):void
			{
				var step:StepItem = StepItem(getStepItemFromStepLabel(stepLabel));
				
				if (step != null)
				{
					step.status = status;
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:Sine id="ease" />
		<s:BlurFilter id="blur"/>
		<s:RadioButtonGroup id="installPermissionRbtnGrp" change="handleInstallPermissionChange(event)" />
	</fx:Declarations>
	<s:states>
		<s:State name="default" />
		<s:State name="optionsState" />
		<s:State name="installState" />
	</s:states>
	<s:transitions>
		<s:Transition id="showDefault" fromState="*" toState="default">
			<s:Sequence id="t0" targets="{[firstStepGroup]}" effectEnd="placeFirstGroup()">
				<s:SetAction target="{firstStepGroup}" property="visible" value="true"/>
				<s:SetAction target="{secondStepGroup}" property="visible" value="false"/>
				<s:SetAction target="{thirdStepGroup}" property="visible" value="false"/>
				<s:Move target="{firstStepGroup}" xFrom="800" xTo="{this.width/2 - firstStepGroup.width/2}" duration="500" easer="{ease}" />
				<!--<s:Parallel targets="{[firstStepGroup]}" >
					<s:AnimateFilter target="{firstStepGroup}" bitmapFilter="{blur}" duration="200" repeatCount="2" repeatBehavior="reverse"> 
						<s:SimpleMotionPath property="blurY" valueFrom="1" valueTo="20"/> 
					</s:AnimateFilter>
				</s:Parallel>-->
			</s:Sequence>
		</s:Transition>
		<s:Transition id="showOptions" fromState="*" toState="optionsState">
			<s:Sequence id="t1" targets="{[secondStepGroup]}" effectEnd="placeSecondGroup()">
				<s:SetAction target="{firstStepGroup}" property="visible" value="false"/>
				<s:SetAction target="{secondStepGroup}" property="visible" value="true"/>
				<s:SetAction target="{thirdStepGroup}" property="visible" value="false"/>
				<s:Move target="{secondStepGroup}" xFrom="800" xTo="{this.width/2 - secondStepGroup.width/2}" duration="500" easer="{ease}" />
				<!--<s:Parallel targets="{[secondStepGroup]}" >
					<s:AnimateFilter target="{secondStepGroup}" bitmapFilter="{blur}" duration="200" repeatCount="2" repeatBehavior="reverse"> 
						<s:SimpleMotionPath property="blurY" valueFrom="1" valueTo="20"/> 
					</s:AnimateFilter>
				</s:Parallel>-->
			</s:Sequence>
		</s:Transition>
		<s:Transition id="showInstall" fromState="*" toState="installState">
			<s:Sequence id="t2" targets="{[thirdStepGroup]}" effectEnd="placeThirdGroup()">
				<s:SetAction target="{firstStepGroup}" property="visible" value="false"/>
				<s:SetAction target="{secondStepGroup}" property="visible" value="false"/>
				<s:SetAction target="{thirdStepGroup}" property="visible" value="true"/>
				<s:Move target="{thirdStepGroup}" xFrom="800" xTo="{this.width/2 - thirdStepGroup.width/2}" duration="500" easer="{ease}" />
				<!--<s:Parallel targets="{[thirdStepGroup]}" >
					<s:AnimateFilter target="{thirdStepGroup}" bitmapFilter="{blur}" duration="200" repeatCount="2" repeatBehavior="reverse"> 
						<s:SimpleMotionPath property="blurY" valueFrom="1" valueTo="20"/> 
					</s:AnimateFilter>
				</s:Parallel>-->
			</s:Sequence>
		</s:Transition>
	</s:transitions>
	<s:layout>
		<s:BasicLayout />
	</s:layout>
	
	<s:HGroup left="0" right="0" paddingLeft="20" paddingRight="20" paddingTop="5" horizontalAlign="right">
<!--		<s:Button label="first" click="currentState = 'default'" />
		<s:Button label="second" click="currentState = 'optionsState'" />
		<s:Button label="third" click="currentState = 'installState'" />-->
		<s:Spacer width="100%" />
		<s:Label id="langLabel" horizontalCenter="0" 
				 height="100%" textAlign="right"
				 text="Current Language" verticalAlign="middle"/>
		<s:ComboBox id="_langSelect" width="184" change="_langSelect_changeHandler(event)"/>
	</s:HGroup>
	<s:Panel id="firstStepGroup" title="Select installation directory" width="640" height="200" top="280" x="{firstStepGroup.x = this.width/2 - firstStepGroup.width/2}"
			 visible="true" visible.optionsState="false" visible.installState="false"  
			 backgroundAlpha="0" >
		<s:layout>
			<s:HorizontalLayout verticalAlign="middle" paddingRight="10" paddingLeft="10" />
		</s:layout>
		<s:TextInput id="flexSDKTxtInput" width="100%" prompt="{_constants.SELECT_PATH_PROMPT}"
					 change="handleFlexSDXTxtInputChange(event)"/>
		<s:Button id="browseBtn" styleName="browseBtnStyle" width="88" height="32"
				  label="{_constants.BROWSE_BTN_LABEL}" click="browseForSDK(event)" toolTip="{_constants.INFO_SELECT_DIRECTORY}" />
		<s:controlBarContent>
			<s:Spacer width="100%" />
			<s:Button id="nextBtn" styleName="mainBtnStyle" width="88" height="32" right="10"
					  label="{ViewResourceConstants.getInstance().NEXT_BTN_LABEL}" enabled="false" click="handleFirstStepNextBtnClick(event)" />
		</s:controlBarContent>
	</s:Panel>
	<s:Panel id="secondStepGroup" title="Select components" width="640" height="200" top="280" visible="false" visible.optionsState="true" 
			 backgroundAlpha="0" >
		<s:controlBarContent>
			<s:Spacer width="100%" />
			<s:Button id="installBtn" styleName="mainBtnStyle" width="88" height="32" right="10"
					  label="{ViewResourceConstants.getInstance().INSTALL_BTN_LABEL}" enabled="false" click="handleInstallBtnClick(event)" />
		</s:controlBarContent>
		<s:layout>
			<s:VerticalLayout verticalAlign="middle" paddingRight="10" paddingLeft="10" />
		</s:layout>
		<s:HGroup width="100%" height="100%" horizontalAlign="center">
			<s:List id="optionalComponentsList" width="40%" height="100%"
					itemRenderer="org.apache.flex.packageflexsdk.view.itemrenderers.OptionalInstallItemRenderer"
					dataProvider="{_optionalInstallsDataProvider}" 
					change="handleOptionalInstallsChange(event)">
				<s:layout>
					<s:VerticalLayout />
				</s:layout>
			</s:List>
			<s:TextArea id="optionalInstallsTxtArea" fontSize="12" width="60%" height="100%" verticalScrollPolicy="off" />
		</s:HGroup>
		<s:HGroup width="100%" height="20" horizontalAlign="center" verticalAlign="middle">
			<s:RadioButton id="installRdBtn" label="{_constants.INSTALL}" selected="false" group="{installPermissionRbtnGrp}" visible="false"/>
			<s:RadioButton id="dontInstallRdBtn" label="{_constants.DONT_INSTALL}" selected="false" group="{installPermissionRbtnGrp}" visible="false"/>
			<s:Button id="mplLicenseBtn" label="MPLLicense" styleName="genericBtnStyle" click="{showMPLLicense(event)}" includeInLayout="false" />
			<s:Button id="adobeLicenseBtn" label="Adobe License" styleName="genericBtnStyle" click="{showAdobeLicense(event)}" includeInLayout="false" />
		</s:HGroup>
	</s:Panel>
	
	<s:Panel id="thirdStepGroup" title="Installing..."  width="640" height="200" top="280" visible="false" visible.installState="true" 
			 backgroundAlpha="0">
		<s:layout>
			<s:VerticalLayout horizontalAlign="center" paddingTop="10" paddingRight="10" paddingLeft="10" />
		</s:layout>
		<controls1:MultiStepProgressIndicator top="" steps="{_installationSteps}" />
		<s:Label id="lastMessage" text="{_messages.getItemAt(_messages.length-1)}" width="80%" horizontalCenter="0" />
		<controls:ProgressBar id="progressBar" width="60%" height="21" />
		<s:Spacer height="100%" />
	</s:Panel>
	<s:HGroup left="0" right="0" bottom="20" paddingLeft="20" paddingRight="20" paddingTop="0">
		<s:Button id="installLogBtn" styleName="genericBtnStyle" width="110" height="32"
				  label="{_constants.INSTALL_LOG_BTN_LABEL}" click="showConsole(event)" />
		<s:Spacer width="100%" />
		<s:Button id="closeBtn" styleName="genericBtnStyle" width="88" height="32" 
				  label="{_constants.CLOSE_BTN_LABEL}" click="closeApplication(event)" />
	</s:HGroup>
	
</s:WindowedApplication>